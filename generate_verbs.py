import json
import time
from le_conjugueur import LeConjugueur
from googletrans import Translator
from tqdm import tqdm
import os

# --- CONFIGURATION ---
INPUT_FILE = 'verb_list.json'
OUTPUT_DIR = 'js'
OUTPUT_FILE = os.path.join(OUTPUT_DIR, 'verbs.js')

# Mapping from the API's pronoun/tense names to our app's names
PRONOUNS_MAP = {
    "je": "je",
    "tu": "tu",
    "il": "il/elle/on",
    "nous": "nous",
    "vous": "vous",
    "ils": "ils/elles"
}
TENSES_MAP = {
    "Présent": "présent",
    "Passé composé": "passé composé",
    "Imparfait": "imparfait",
    "Futur simple": "futur simple",
    "Conditionnel Présent": "conditionnel présent",
    "Subjonctif Présent": "subjonctif présent"
}

def get_frequency(index, total_verbs):
    """Assigns a frequency category based on the verb's position in the list."""
    if index < 50:
        return "super-common"
    if index < 150:
        return "common"
    return "rare"

def process_verbs():
    translator = Translator() # Initialize translator once
    
    # Load the list of verb infinitives
    with open(INPUT_FILE, 'r', encoding='utf-8') as f:
        verb_infinitives = json.load(f)
        # Remove duplicates while preserving order
        verb_infinitives = sorted(set(verb_infinitives), key=verb_infinitives.index)
        
    processed_verbs = []
    print(f"Processing {len(verb_infinitives)} unique verbs...")

    for index, infinitive in enumerate(tqdm(verb_infinitives, desc="Generating verb data")):
        try:
            # 1. Get conjugation data for the specific verb
            conjugator = LeConjugueur(verb=infinitive)
            verb_data = conjugator.conjugate()
            if not verb_data:
                print(f"\nWarning: Could not find conjugation for '{infinitive}'. Skipping.")
                continue

            # 2. Get translation (with a small delay to be polite to the API)
            time.sleep(0.05) 
            translation_result = translator.translate(infinitive, src='fr', dest='en')
            translation = translation_result.text.lower()

            # 3. Format the data into the required structure
            formatted_tenses = {}
            for api_tense, app_tense in TENSES_MAP.items():
                if api_tense in verb_data:
                    formatted_pronouns = {}
                    for api_pronoun, app_pronoun in PRONOUNS_MAP.items():
                        conjugation = verb_data[api_tense].get(api_pronoun, "")
                        # Clean up the raw conjugation string from the library
                        conjugation = conjugation.replace(f"{api_pronoun} ", "").strip()
                        if api_pronoun == "je" and conjugation.startswith("j'"):
                             conjugation = conjugation[2:]
                        
                        formatted_pronouns[app_pronoun] = conjugation
                    formatted_tenses[app_tense] = formatted_pronouns
            
            if not formatted_tenses:
                 print(f"\nWarning: No matching tenses found for '{infinitive}'. Skipping.")
                 continue

            # 4. Assemble the final verb object
            verb_object = {
                "infinitive": infinitive,
                "translation": translation,
                "frequency": get_frequency(index, len(verb_infinitives)),
                "tenses": formatted_tenses
            }
            processed_verbs.append(verb_object)

        except Exception as e:
            print(f"\nError processing '{infinitive}': {e}. Skipping.")

    # 5. Write the final data to the output JavaScript file
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        f.write("// This file is auto-generated by generate_verbs.py. DO NOT EDIT MANUALLY.\n\n")
        f.write("const verbs = ")
        json.dump(processed_verbs, f, ensure_ascii=False, indent=4)
        f.write(";\n\n")
        f.write('const pronouns = ["je", "tu", "il/elle/on", "nous", "vous", "ils/elles"];\n')
        f.write('const tenses = ["présent", "passé composé", "imparfait", "futur simple", "conditionnel présent", "subjonctif présent"];\n')

    print(f"\nSuccessfully generated {OUTPUT_FILE} with {len(processed_verbs)} verbs.")

if __name__ == "__main__":
    process_verbs()